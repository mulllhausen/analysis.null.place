// this file was generated by merging:
//- js/comments-manager.js
//- js/facebook-comments.js
//- js/disqus-comments.js



// original file: comments-manager.js
siteGlobals.loadedCommentsPlatforms = [];
addEvent(window, 'load', function () {
    foreach(siteGlobals.commentsPlatforms, function (i, platformI) {
        var buttonI = '.comment-with.' + platformI.toLowerCase();
        foreach(document.querySelectorAll(buttonI), function (i, el) {
            // 'button' event
            addEvent(el, 'click', function (e) { renderComments(platformI); });
        });
        foreach(document.querySelectorAll(buttonI + ' span'), function (i, el) {
            // 'button-count' event
            addEvent(el, 'click', function (e) { renderComments(platformI); });
        });
    });
    addEvent(document.getElementById('exitComments'), 'click', exitComments);
});

var spacerTopPos = 0; // global
var commentsTopPos = 0; // global
var timeoutIDResizeBottomSpacer; // global
function repositionCommentsContainer(platformI) {
    closeMenu();
    spacerTopPos = getCoordinates(document.querySelector('article .bottom-spacer')).top;
    document.querySelector('article .bottom-spacer').style.height = '0px';
    var commentsContainer = document.querySelector('.comments');
    commentsContainer.style.display = 'block';
    var topPos = window.pageYOffset + 60;
    commentsContainer.style.top = topPos + 'px';
    commentsTopPos = topPos; // save for use in resizeBottomSpacerHeight() later
    timeoutIDResizeBottomSpacer = setInterval(function () {
        resizeBottomSpacerHeight(platformI);
    }, 200);
}

function renderComments(platformI) {
    // allow repositioning any time
    repositionCommentsContainer(platformI);
    if (siteGlobals.events.loadingCommentsPlatform != null) return;

    siteGlobals.events.loadingCommentsPlatform = platformI;
    foreach(siteGlobals.commentsPlatforms, function (j, platformJ) {
        var buttons = document.querySelectorAll(
            '.comment-with.' + platformJ.toLowerCase()
        );
        var commentsArea = document.querySelector(
            '.' + platformJ.toLowerCase() + '-comments'
        );
        if (platformI == platformJ) { // show this comments platform
            commentsArea.style.display = 'block';
        } else { // hide all other comments platforms and disallow selection
            commentsArea.style.display = 'none';
        }
        foreach(buttons, function (i, button) {
            if (platformI == platformJ) {
                button.classList.add('selected');
            } else {
                button.classList.remove('selected');
                button.classList.add('disallow-selection');
            }
        })
    });

    // hide offline warnings from all platforms
    foreach(document.querySelectorAll('.platform-offline'), function (i, el) {
        el.style.display = 'none';
    });

    // if the platform has already been successfully loaded then there is no
    // need to fetch it again
    if (inArray(platformI, siteGlobals.loadedCommentsPlatforms)) {
        return commentsLoaded();
    }
    window['load' + platformI + 'Platform']();
}

function exitComments() {
    // do not enable the exit button until the comments have loaded
    if (siteGlobals.events.loadingCommentsPlatform != null) return;
    clearInterval(timeoutIDResizeBottomSpacer);
    document.querySelector('.comments').style.display = 'none';
    foreach(document.querySelectorAll('.comment-with'), function(i, el) {
        el.classList.remove('disallow-selection');
        el.classList.remove('selected');
    });
    document.querySelector('article .bottom-spacer').style.height = '0px';
}

// make any comments that are hidden below the end of the article visible
function resizeBottomSpacerHeight(platformI) {
    var commentsDivEl = document.querySelector('.comments');
    var commentsBottom = commentsTopPos + commentsDivEl.offsetHeight;
    var footerTop = getCoordinates(document.querySelector('footer')).top;
    var extraPadding = 30; // px. the bottom box-shadow of .comments
    var error = footerTop - extraPadding - commentsBottom;
    if (inArray(platformI, siteGlobals.loadedCommentsPlatforms)) {
        // the platform has already been loaded, so this is the last time we
        // need to run this function for now
        clearInterval(timeoutIDResizeBottomSpacer);
    }
    if (Math.abs(error) <= 0) return;
    var spacerEl = document.querySelector('article .bottom-spacer');
    if (spacerTopPos > commentsBottom) spacerEl.style.height = '0px';
    else spacerEl.style.height = (spacerEl.offsetHeight - error) + 'px';
}

// comments were successfully loaded (any platform)
function commentsLoaded() {
    foreach(document.querySelectorAll('.comment-with'), function(i, el) {
        el.classList.remove('disallow-selection');
    });
    siteGlobals.events.loadingCommentsPlatform = null;
}

// a platform was found to be offline
function platformOffline() {
    foreach(document.querySelectorAll('.comment-with'), function(i, el) {
        el.classList.remove('disallow-selection');
    });
    siteGlobals.events.loadingCommentsPlatform = null;
}
// end original file: comments-manager.js

// original file: facebook-comments.js
window.fbAsyncInit = function () {
    FB.init({
        appId: siteGlobals.facebookAppID,
        //autoLogAppEvents: true,
        cookie: true,
        xfbml: true,
        version: 'v3.0'
    });
    FB.AppEvents.logPageView();
    FB.Event.subscribe('xfbml.render', fbRendered);
    FB.Event.subscribe('comment.create', fbUpdateCommentCount);
    FB.Event.subscribe('comment.remove', fbUpdateCommentCount);
};
function loadFBPlatform() {
    // this function is called when the fb button is first clicked.
    // no need to hide offline comments here since this is already handled in
    // the click event in comments-manager.js.
    document.querySelector('.platform-comments-loader.faceboook').style.
    display = 'block';

    // warn user when fb is inaccessible after 15 seconds
    siteGlobals.events.fbCommentsLoadingTimer = setTimeout(fbOffline, 15 * 1000);

    (function (d, s, id) {
        var js, fjs = d.getElementsByTagName(s)[0];
        if (d.getElementById(id)) return;
        js = d.createElement(s);
        js.id = id;
        js.src = 'https://connect.facebook.net/en_US/sdk.js?nocache=' + unixtime();
        fjs.parentNode.insertBefore(js, fjs);
    } (document, 'script', 'facebook-jssdk'));
}
function fbOffline() {
    document.querySelector('.platform-offline.faceboook').style.display = 'block';

    document.querySelector('.platform-comments-loader.faceboook').style.
    display = 'none';

    // remove the facebook script from the page so that the user can try again
    deleteElementById('facebook-jssdk');
    platformOffline();
}
function fbRendered(data) {
    siteGlobals.loadedCommentsPlatforms.push('FB'); // as per siteGlobals.commentsPlatforms
    clearTimeout(siteGlobals.events.fbCommentsLoadingTimer);
    document.querySelector('.platform-offline.faceboook').style.display = 'none';
    document.querySelector('.platform-comments-loader.faceboook').style.
    display = 'none';
    commentsLoaded();
}
function fbUpdateCommentCount() {
    ajax(
        'https://graph.facebook.com/v2.1/' +
        encodeURIComponent(siteGlobals.siteURL + '/' + siteGlobals.article.url) +
        '?fields=share&method=get&pretty=0&sdk=joey&suppress_http_code=1',
        function (json) {
            try {
                document.querySelector('.fb-comment-count').innerHTML = JSON.
                parse(json).share.comment_count;
            } catch (err) {}
        }
    );
}
fbUpdateCommentCount(); // init
// end original file: facebook-comments.js

// original file: disqus-comments.js
addEvent(window, 'load', resetDisqusComments);
var disqus_config = function () {
    if (siteGlobals.siteURL != '') {
        this.page.url = siteGlobals.siteURL + '/' + siteGlobals.article.url;
    }
    this.page.identifier = siteGlobals.article.title;
    this.page.sortOrder = 'newest';
    this.callbacks.onReady = [disqusReady];
    this.callbacks.onNewComment = [disqusCommentUpdated];
    /* events currently unused by disqus
    this.callbacks.afterRender = [disqusAfterRender];
    this.callbacks.beforeComment = [disqusBeforeComment];
    this.callbacks.onIdentify = [disqusIdentify];
    this.callbacks.onInit = [disqusInitialised];
    this.callbacks.onPaginate = [disqusPaginate];
    this.callbacks.preData = [disqusPreData];
    this.callbacks.preInit = [disqusPreInit];
    this.callbacks.preReset = [disqusPreReset];
    */
};
function resetDisqusComments() {
    document.getElementById('disqus_thread').innerHTML = document.
    getElementById('disqusCommentsSilo').innerHTML;
}
function loadDisqusPlatform() {
    // this function is called when the disqus button is clicked. if disqus
    // loads correctly then this function can never be called again. but if
    // disqus fails to load (eg because the browser is offline) then this
    // function may be called again.

    // no need to hide offline comments here since this is already handled in
    // the click event in comments-manager.js

    document.querySelector('.disqus-comments .platform-comments-loader').style.
    display = 'block';

    document.querySelector('.disqus-comments').style.marginBottom = '50px';

    // warn user when disqus is inaccessible after 15 seconds
    siteGlobals.events.disqusCommentsLoadingTimer =
    setTimeout(disqusOffline, 15 * 1000);

    // check for multiple loaders every 0.5 seconds, and enforce 1 loader
    siteGlobals.events.disqusCommentsLoadingInterval =
    setInterval(cleanDisqusLoaders, 0.5 * 1000);

    (function () {
        var d = document, s = d.createElement('script');
        // note: disqus does not load correctly if there is a no-cache variable
        // in the querystring, so do not use one
        s.src = 'https://' + siteGlobals.disqusSiteName + '.disqus.com/embed.js';
        s.id = 'disqus-script';
        s.setAttribute('data-timestamp', +new Date());
        (d.head || d.body).appendChild(s);
    })();
}
function disqusOffline() {
    clearInterval(siteGlobals.events.disqusCommentsLoadingInterval);
    resetDisqusComments(); // erase disqus iframes etc

    document.querySelector('.disqus-comments .platform-offline').style.display =
    'block';

    document.querySelector('.disqus-comments .platform-comments-loader').style.
    display = 'none';

    // remove the disqus script from the page so that the user can try again
    deleteElementById('disqus-script');
    platformOffline();
}
function cleanDisqusLoaders() {
    // this function is a failsafe to ensure that there is only ever 1 disqus
    // loader - either the disqus native loader, or my loader. ordinarily disqus
    // will delete my loader for me, so this will not be necessary. however if
    // the network connection drops in and out then disqus can think that it has
    // already deleted my loaders, when infact i have added the back in. to
    // simulate this:
    // - load the page with the network online and click the disqus icon (this
    // will cache the disqus script. if they allowed a querystring this whole
    // process could be avoided!)
    // - reload the page with the network online (not a hard reload. so the
    // disqus script is still cached in the browser)
    // - go offline and click the disqus icon (wait 15 seconds for my timeout)
    // - go back online and click the disqus icon (at this point you will get 2
    // loaders - mine and the disqus native loader)
    if (enforceOneDisqusLoader()) {
        clearInterval(siteGlobals.events.disqusCommentsLoadingInterval);
    }
}
/* events currently unused by disqus
function disqusAfterRender() { debugger; }
function disqusBeforeComment() { debugger; }
function disqusIdentify() { debugger; }
function disqusInitialised() { debugger; }
function disqusPaginate() { debugger; }
function disqusPreData() { debugger; }
function disqusPreInit() { debugger; }
function disqusPreReset() { debugger; }
*/
function enforceOneDisqusLoader() {
    var anyChanges = false; // init
    var hasSiteLoader = false; // init
    var hasDisqusLoader = false; // init
    var siteLoaderEl; // init
    foreach(document.getElementById('disqus_thread').children, function (i, el) {
        if (el.tagName == 'IFRAME') hasDisqusLoader = true;
        if (
            el.tagName == 'DIV' &&
            inArray('platform-comments-loader', el.className)
        ) {
            siteLoaderEl = el;
            hasSiteLoader = true;
        }
        if (hasDisqusLoader && hasSiteLoader) {
            deleteElement(siteLoaderEl);
            return false; // break
        }
    });
    return (hasDisqusLoader && hasSiteLoader);
}
function disqusCommentUpdated(data) {
    // update the comment count. beware the 10 minute delay
    // (stackoverflow.com/q/38586878)
    // could use a local var to keep track of comment count here to avoid the
    // 10 minute delay? but there is no event when a comment gets deleted, so it
    // would not be 100% accurate.
    DISQUSWIDGETS.getCount({ reset: true });
}
function disqusReady(data) {
    siteGlobals.loadedCommentsPlatforms.push('Disqus'); // as per siteGlobals.commentsPlatforms
    clearTimeout(siteGlobals.events.disqusCommentsLoadingTimer);
    clearInterval(siteGlobals.events.disqusCommentsLoadingInterval);
    document.querySelector('.disqus-comments').style.marginBottom = '0px';
    try {
        // things can get out of sync if the user's connection drops out often.
        // so clean away any loaders that should not be there.
        document.querySelector('.disqus-comments .platform-offline').style.
        display = 'none';

        document.querySelector('.disqus-comments .platform-comments-loader').
        style.display = 'none';

    } catch (e) {}
    commentsLoaded();
}
function disqusUpdateCommentCount() {
    ajax(
        'https://cors-anywhere.herokuapp.com/https://' + siteGlobals.disqusSiteName +
        '.disqus.com/count-data.js?1=' + encodeURIComponent(siteGlobals.article.title) +
        '&nocache=' + unixtime(),
        function (response) {
            try {
                var matches = response.match(/DISQUSWIDGETS.displayCount\((.*)\)/i);
                var json = matches[1]; // capture group
                document.querySelector('.disqus-comment-count').innerHTML = JSON.
                parse(json).counts[0].comments;
            } catch (err) {}
        }
    );
}
disqusUpdateCommentCount(); // init
// end original file: disqus-comments.js